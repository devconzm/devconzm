{
	"name": "jshint",
	"description": "Integrates JSHint into VS Code. JSHint is a linter for JavaScript",
	"version": "0.10.20",
	"author": "Microsoft Corporation",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/Microsoft/vscode-jshint.git"
	},
	"bugs": {
		"url": "https://github.com/Microsoft/vscode-jshint/issues"
	},
	"icon": "jshint_icon.png",
	"galleryBanner": {
		"color": "#5c2d91",
		"theme": "dark"
	},
	"categories": [
		"Linters"
	],
	"publisher": "dbaeumer",
	"engines": {
		"vscode": "^1.26.0"
	},
	"activationEvents": [
		"onLanguage:javascript",
		"onLanguage:javascriptreact",
		"onLanguage:html"
	],
	"main": "./jshint/out/extension",
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "JSHint configuration",
			"properties": {
				"jshint.enable": {
					"type": "boolean",
					"default": true,
					"description": "Control whether or not jshint is enabled for JavaScript files."
				},
				"jshint.config": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"description": "A path to file containing the configuration options for jshint. If the file exists it overrides jshint.options and any .jshintrc file"
				},
				"jshint.options": {
					"type": "object",
					"properties": {
						"bitwise": {
							"description": "Prohibit the use of bitwise operators (&, |, ^, etc.)",
							"type": "boolean",
							"default": false
						},
						"curly": {
							"description": "Requires you to always put curly braces around blocks in loops and conditionals",
							"type": "boolean",
							"default": false
						},
						"eqeqeq": {
							"description": "Prohibits the use of `==` and `!=` in favor of `===` and `!==`",
							"type": "boolean",
							"default": false
						},
						"esversion": {
							"description": "The ECMAScript version to which the code must adhere",
							"type": "integer",
							"default": 5,
							"enum": [
								3,
								5,
								6
							]
						},
						"forin": {
							"description": "Requires all `for in` loops to filter object's items with obj.hasOwnProperty()",
							"type": "boolean",
							"default": false
						},
						"freeze": {
							"description": "Prohibits overwriting prototypes of native objects such as Array, Date and so on",
							"type": "boolean",
							"default": false
						},
						"funcscope": {
							"description": "Suppresses warnings about declaring variables inside of control structures while accessing them later from the outside",
							"type": "boolean",
							"default": false
						},
						"futurehostile": {
							"description": "Enables warnings about the use of identifiers which are defined in future versions of JavaScript",
							"type": "boolean",
							"default": false
						},
						"globals": {
							"description": "Specify a white list of global variables that are not formally defined in the source code",
							"type": "object",
							"additionalProperties": {
								"description": "Name of the global. Set to `true` for read/write, `false` for read-only.",
								"type": "boolean"
							}
						},
						"iterator": {
							"description": "Suppresses warnings about the __iterator__ property.",
							"type": "boolean",
							"default": false
						},
						"latedef": {
							"description": "Prohibits the use of a variable before it was defined",
							"enum": [
								true,
								false,
								"nofunc"
							],
							"default": false
						},
						"maxcomplexity": {
							"description": "Max cyclomatic complexity per function",
							"type": [
								"boolean",
								"integer"
							],
							"default": false
						},
						"maxdepth": {
							"description": "Max depth of nested blocks",
							"type": [
								"boolean",
								"integer"
							],
							"default": false
						},
						"maxerr": {
							"description": "Maximum amount of warnings JSHint will produce before giving up",
							"type": "integer",
							"default": 50
						},
						"maxparams": {
							"description": "Max number of formal parameters allowed per function",
							"type": [
								"boolean",
								"integer"
							]
						},
						"maxstatements": {
							"description": "Max number statements per function",
							"type": [
								"boolean",
								"integer"
							],
							"default": false
						},
						"noarg": {
							"description": "Prohibits the use of `arguments.caller` and `arguments.callee`",
							"type": "boolean",
							"default": false
						},
						"nocomma": {
							"description": "Prohibits the use of the comma operator",
							"type": "boolean",
							"default": false
						},
						"nonbsp": {
							"description": "Warns about `non-breaking whitespace` characters",
							"type": "boolean",
							"default": false
						},
						"nonew": {
							"description": "Prohibits the use of constructors for side-effects (without assignment)",
							"type": "boolean",
							"default": false
						},
						"notypeof": {
							"description": "Suppresses warnings about invalid `typeof`operator values",
							"type": "boolean",
							"default": false
						},
						"shadow": {
							"description": "Suppresses warnings about variable shadowing. i.e. declaring a variable that had been already declared somewhere in the outer scope",
							"type": [
								"boolean",
								"string"
							],
							"default": false,
							"enum": [
								true,
								false,
								"inner",
								"outer"
							]
						},
						"singleGroups": {
							"description": "Prohibits the use of the grouping operator when it is not strictly required.",
							"type": "boolean",
							"default": false
						},
						"strict": {
							"description": "Requires all code to run in ES5 strict mode",
							"type": [
								"boolean",
								"string"
							],
							"default": false,
							"enum": [
								true,
								false,
								"implied",
								"global",
								"func"
							]
						},
						"undef": {
							"description": "Prohibits the use of explicitly undeclared variables",
							"type": "boolean",
							"default": false
						},
						"unused": {
							"description": "Warns when you define and never use your variables",
							"type": [
								"boolean",
								"string"
							],
							"default": false,
							"enum": [
								true,
								false,
								"vars",
								"strict"
							]
						},
						"varstmt": {
							"description": "Forbids the use of VariableStatements (`var`) in favor of `let` and `const`",
							"type": "boolean",
							"default": false
						},
						"asi": {
							"description": "Suppresses warnings about missing semicolons",
							"type": "boolean",
							"default": false
						},
						"boss": {
							"description": "Suppresses warnings about the use of assignments in cases where comparisons are expected",
							"type": "boolean",
							"default": false
						},
						"debug": {
							"description": "Suppresses warnings about the `debugger` statements in your code",
							"type": "boolean",
							"default": false
						},
						"elision": {
							"description": "Tells JSHint that your code uses ES3 array elision elements, or empty elements",
							"type": "boolean",
							"default": false
						},
						"eqnull": {
							"description": "Suppresses warnings about `== null` comparisons",
							"type": "boolean",
							"default": false
						},
						"evil": {
							"description": "Suppresses warnings about the use of `eval`",
							"type": "boolean",
							"default": false
						},
						"expr": {
							"description": "Suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls",
							"type": "boolean",
							"default": false
						},
						"lastsemic": {
							"description": "Suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block",
							"type": "boolean",
							"default": false
						},
						"loopfunc": {
							"description": "Suppresses warnings about functions inside of loops",
							"type": "boolean",
							"default": false
						},
						"moz": {
							"description": "Tells JSHint that your code uses Mozilla JavaScript extensions",
							"type": "boolean",
							"default": false
						},
						"noyield": {
							"description": "Suppresses warnings about generator functions with no `yield` statement in them",
							"type": "boolean",
							"default": false
						},
						"plusplus": {
							"description": "Prohibits the use of `++` and `--`",
							"type": "boolean",
							"default": false
						},
						"proto": {
							"description": "Suppresses warnings about the `__proto__` property",
							"type": "boolean",
							"default": false
						},
						"scripturl": {
							"description": "Suppresses warnings about the use of script-targeted URLs",
							"type": "boolean",
							"default": false
						},
						"supernew": {
							"description": "Suppresses warnings about constructions like `new function () { ... };` and `new Object;`",
							"type": "boolean",
							"default": false
						},
						"validthis": {
							"description": "Suppresses warnings about possible strict violations when the code is running in strict mode and you use `this` in a non-constructor function",
							"type": "boolean",
							"default": false
						},
						"withstmt": {
							"description": "Suppresses warnings about the use of the `with` statement",
							"type": "boolean",
							"default": false
						},
						"browser": {
							"description": "[Environment] Web Browser (window, document, etc)",
							"type": "boolean",
							"default": false
						},
						"browserify": {
							"description": "[Environment] Browserify",
							"type": "boolean",
							"default": false
						},
						"couch": {
							"description": "[Environment] CouchDB",
							"type": "boolean",
							"default": false
						},
						"devel": {
							"description": "[Environment] Development/debugging (alert, confirm, etc)",
							"type": "boolean",
							"default": false
						},
						"dojo": {
							"description": "[Environment] Dojo Toolkit",
							"type": "boolean",
							"default": false
						},
						"jasmine": {
							"description": "[Environment] Jasmine unit testing framework",
							"type": "boolean",
							"default": false
						},
						"jquery": {
							"description": "[Environment] jQuery",
							"type": "boolean",
							"default": false
						},
						"mocha": {
							"description": "[Environment] Mocha unit testing framework",
							"type": "boolean",
							"default": false
						},
						"module": {
							"description": "[Environment] ES6 module",
							"type": "boolean",
							"default": false
						},
						"mootools": {
							"description": "[Environment] MooTools",
							"type": "boolean",
							"default": false
						},
						"node": {
							"description": "[Environment] Node.js",
							"type": "boolean",
							"default": false
						},
						"nonstandard": {
							"description": "[Environment] Widely adopted globals (escape, unescape, etc)",
							"type": "boolean",
							"default": false
						},
						"phantom": {
							"description": "[Environment] PhantomJS runtime environment",
							"type": "boolean",
							"default": false
						},
						"prototypejs": {
							"description": "[Environment] Prototype JavaScript framework",
							"type": "boolean",
							"default": false
						},
						"rhino": {
							"description": "[Environment] Rhino",
							"type": "boolean",
							"default": false
						},
						"shelljs": {
							"description": "[Environment] Defines globals exposed by the ShellJS library",
							"type": "boolean",
							"default": false
						},
						"typed": {
							"description": "[Environment] Defines globals for typed array constructors",
							"type": "boolean",
							"default": false
						},
						"worker": {
							"description": "[Environment] Web Workers",
							"type": "boolean",
							"default": false
						},
						"wsh": {
							"description": "[Environment] Windows Scripting Host",
							"type": "boolean",
							"default": false
						},
						"yui": {
							"description": "[Environment] Yahoo User Interface",
							"type": "boolean",
							"default": false
						}
					},
					"default": {},
					"description": "The jshint options object to provide args to the jshint command."
				},
				"jshint.excludePath": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"description": "A path to a file containing patterns describing which files and directories should be ignored by jshint. If the file exists it overrides jshint.exclude and any .jshintignore file."
				},
				"jshint.exclude": {
					"type": "object",
					"default": {},
					"description": "Matching files and directories are being ignored by jshint. Glob patterns are interpreted relative to the workspace's root folder."
				},
				"jshint.reportWarningsAsErrors": {
					"type": "boolean",
					"default": false,
					"description": "Report warnings as errors"
				},
				"jshint.lintHTML": {
					"type": "boolean",
					"default": false,
					"description": "Lint JavaScript embedded in HTML"
				},
				"jshint.nodePath": {
					"type": "string",
					"default": "",
					"description": "Configures the path to the jshint module. Can be an absolute path or relative to the current directory."
				},
				"jshint.packageManager": {
					"scope": "resource",
					"type": "string",
					"enum": [
						"npm",
						"yarn"
					],
					"default": "npm",
					"description": "The package manager you use to install node modules."
				},
				"jshint.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the jshint linter service."
				}
			}
		},
		"commands": [
			{
				"title": "Show output",
				"category": "JSHint",
				"command": "jshint.showOutputChannel"
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "jshint.json",
				"url": "http://json.schemastore.org/grunt-jshint-task"
			},
			{
				"fileMatch": ".jshintrc",
				"url": "http://json.schemastore.org/jshintrc"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "cd jshint && npm run update-vscode && cd .. && npm run compile",
		"compile:client": "tsc -p jshint/tsconfig.json",
		"compile:server": "tsc -p jshint-server/tsconfig.json",
		"watch:client": "tsc -w -p jshint/tsconfig.json",
		"watch:server": "tsc -w -p jshint-server/tsconfig.json",
		"compile": "npm run compile:client && npm run compile:server",
		"postinstall": "cd jshint && npm install && cd ../jshint-server && npm install && cd .."
	},
	"devDependencies": {
		"typescript": "^2.6.2",
		"@types/node": "^9.4.0"
	},
	"__metadata": {
		"id": "82dfe17d-bb64-404e-bcc5-f9803f7ab5d5",
		"publisherId": "29859a75-d81b-4f0e-8578-2c80ecee6f99",
		"publisherDisplayName": "Dirk Baeumer"
	}
}